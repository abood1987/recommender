"""
Django settings for recommender project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path
from decouple import (
    Config,
    RepositoryEnv,
)

from recommender.utils import get_secret_key

################################################################################
# BASE

BASE_DIR = Path(__file__).resolve().parent.parent.parent

################################################################################
# ENVIRONMENT

config_secrets = Config(
    RepositoryEnv(
        Path(BASE_DIR).joinpath(".env")
    )
)

config_shared = Config(
    RepositoryEnv(
        Path(BASE_DIR).joinpath("shared.env")
    )
)

DJANGO_ENV = config_shared("DJANGO_ENV", cast=str)

################################################################################
# DJANGO ENV OPTIONS
DJANGO_ENV_OPTIONS = {}

if DJANGO_ENV == "PRODUCTION":
    DJANGO_ENV_OPTIONS["SHORTNAME"] = ""
    DJANGO_ENV_OPTIONS["DEBUG"] = False
    # DJANGO_ENV_OPTIONS["LOG_PATH"] = os.path.join(
    #     LOG_PATH_BASE_DIR,
    #     PROJECT_NAME
    # )

    # Required when no request exists, e.g. sending emails with management command
    DJANGO_ENV_OPTIONS["WWW_PROTOCOL"] = "https"
    DJANGO_ENV_OPTIONS["DOMAIN"] = ""  # Domain e.g. APP_NAME.DOMAIN.tld
elif DJANGO_ENV == "DEVELOP":
    DJANGO_ENV_OPTIONS["SHORTNAME"] = "DEV"
    DJANGO_ENV_OPTIONS["DEBUG"] = False

    # DJANGO_ENV_OPTIONS["LOG_PATH"] = os.path.join(
    #     LOG_PATH_BASE_DIR,
    #     "%s_develop" % PROJECT_NAME
    # )

    # Required when no request exists, e.g. sending emails with management command
    DJANGO_ENV_OPTIONS["WWW_PROTOCOL"] = "https"
    DJANGO_ENV_OPTIONS["DOMAIN"] = ""  # DEBUG Domain e.g. APP_NAME-dev.DOMAIN.tld

elif DJANGO_ENV == "LOCAL":
    DJANGO_ENV_OPTIONS["SHORTNAME"] = "LOCAL"
    DJANGO_ENV_OPTIONS["DEBUG"] = True
    # DJANGO_ENV_OPTIONS["LOG_PATH"] = os.path.join(
    #     LOG_PATH_BASE_DIR,
    #     "%s_develop" % PROJECT_NAME
    # )

    # Required when no request exists, e.g. sending emails with management command
    DJANGO_ENV_OPTIONS["WWW_PROTOCOL"] = "http"
    DJANGO_ENV_OPTIONS["DOMAIN"] = "127.0.0.1:8000"

else:
    raise ValueError(
        """
            Environment variable "DJANGO_ENV" must be defined (PRODUCTION, TEST, DEVELOP, LOCAL).
            Will not use a default value! Current value: %s
        """ % (
            DJANGO_ENV
        )
    )

################################################################################
# DEFAULTS

SECRET_KEY = get_secret_key()

DEBUG = DJANGO_ENV_OPTIONS["DEBUG"]

ROOT_URLCONF = 'recommender.urls'


# IN OUR CASE * IS OK BECAUSE WE CHECK IT IN APACHE OR NGINX @we said :)
ALLOWED_HOSTS = ["*"]
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
################################################################################
# MEDIA / STATIC / LOCALE
STATIC_URL = 'static/'
STATICFILES_DIRS = [
    BASE_DIR / "static",
]
################################################################################
# LANGUAGE/DATE/TIME
LANGUAGE_CODE = "en-GB"

TIME_ZONE = "Europe/Vienna"

USE_I18N = True
USE_L10N = True
USE_TZ = True
USE_THOUSAND_SEPARATOR = True

################################################################################
# DATABASE
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "HOST": config_shared("DB_HOST", cast=str),
        "NAME": config_shared("DB_NAME", cast=str),
        "USER": config_shared("DB_USER", cast=str),
        "PASSWORD": config_secrets("DB_PASSWORD", cast=str)
    }
}

################################################################################
# INSTALLED APPS

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'recommender_core',
    'recommender_rest',
    'recommender_kb',
    'recommender_profile',

    # test app
    'bootstrap_modal_forms',
    'django_jsonform',
    'prettyjson',
    'django_tables2',
    'bootstrap4',
    'recommender_test',
]

################################################################################
# MIDDLEWARE

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.http.ConditionalGetMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.common.BrokenLinkEmailsMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]


################################################################################
# TEMPLATES

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"]
        ,
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "django.template.context_processors.csrf",
                "django.template.context_processors.debug",
                "django.template.context_processors.i18n",
                "django.template.context_processors.media",
                "django.template.context_processors.request",
            ],
        },
    },
]

WSGI_APPLICATION = 'recommender.wsgi.application'


################################################################################
# AUTHENTICATION

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

